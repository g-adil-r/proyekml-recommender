# -*- coding: utf-8 -*-
"""ML Proyek - Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EMB4sN4FbC5apNxex2G1aFYvcSqbjqlO

# 1. Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

from collections import Counter
from google.colab import drive
from scipy.sparse import coo_matrix, csr_matrix
from sklearn.cluster import MiniBatchKMeans
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import silhouette_score
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
from wordcloud import WordCloud

"""# 2. Data Understanding

## 2.1 Data Loading

### 2.1.1 Mount google drive
"""

drive.mount('drive')

"""### 2.1.2 Unzip file"""

!unzip /content/drive/MyDrive/steam_recommendation.zip

"""### 2.1.3 Load data game"""

gamesDf = pd.read_csv('games.csv')
gamesDf

"""### 2.1.4 Load data user"""

usersDf = pd.read_csv('users.csv')
usersDf

"""### 2.1.5 Load data rekomendasi/review"""

recommendationsDf = pd.read_csv('recommendations.csv')
recommendationsDf

"""### 2.1.6 Load metadata game"""

gameMetaDf = pd.read_json('games_metadata.json', lines=True)
gameMetaDf

"""### 2.1.7 menggabungkan data game dengan metadata"""

gameJoined = pd.merge(gamesDf, gameMetaDf, on='app_id')
gameJoined

"""## 2.2 Exploratory Data analysis

### 2.2.1 Deskripsi data game
"""

gameJoined.describe()

"""### 2.2.2 Deskripsi data user"""

usersDf.describe()

"""### 2.2.3 Deskripsi data review"""

recommendationsDf.describe()

"""### 2.2.4 Jumlah game tanpa tag"""

gameJoined[gameJoined["tags"].str.len() == 0].shape

"""### 2.2.5 Game dengan nama duplikat"""

gameJoined[gameJoined.title.duplicated()][['app_id','title']]

"""### 2.2.6 Top 10 Tag dan Banyak Tag"""

tags = [tag for gametag in gameMetaDf['tags'] for tag in gametag]

tagCounts = Counter(tags)
print('Total tag:',len(tagCounts))
top10 = tagCounts.most_common(10)

plt.bar([val[0] for val in top10], [val[1] for val in top10], align='center')
plt.xticks(rotation=45, rotation_mode='anchor', ha='right')
plt.suptitle('Top 10 Tag')
plt.show()

"""### 2.2.7 Tag Wordcloud"""

wc = WordCloud(background_color="white", max_font_size=256,
               random_state=0, width=1000, height=700, colormap="winter")
wc.generate_from_frequencies(tagCounts)
plt.imshow(wc, interpolation="bilinear")
plt.axis('off')
plt.show()

"""### 2.2.8 Jumlah Rating"""

rateList = [
    'Overwhelmingly Negative',
    'Very Negative',
    'Negative',
    'Mostly Negative',
    'Mixed',
    'Mostly Positive',
    'Positive',
    'Very Positive',
    'Overwhelmingly Positive',
]

gameJoined['rating'].value_counts()[rateList].plot(kind='bar', title='Jumlah rating pada game')

"""### 2.2.9 Histogram data game"""

gameJoined.drop(columns=['app_id', 'user_reviews']).hist(bins=50, figsize=(10,7))

"""### 2.2.10 Histogram user-review"""

fig, (ax1, ax2) = plt.subplots(1,2, figsize=(8,3))

gameJoined['user_reviews'].hist(bins=50, ax=ax1)
ax1.set_title('Overall')

gameJoined['user_reviews'].hist(bins=50, range=[0,2000], ax=ax2)
ax2.set_title('Rentang 0-2000 review')

plt.suptitle('User review pada game')
plt.tight_layout()
plt.show()

"""### 2.2.11 Histogram data review"""

fig, ax = plt.subplots(figsize=(5,3))
recommendationsDf['hours'].hist(bins=50, ax=ax)
ax.set_title('hours')

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8,3))
fig.suptitle('helpful')
recommendationsDf['helpful'].hist(bins=50, ax=ax1)
ax1.set_title('overall')
recommendationsDf['helpful'].hist(bins=50, range=[0,50], ax=ax2)
ax2.set_title('rentang 0-50 review')

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8,3))
fig.suptitle('funny')
recommendationsDf['funny'].hist(bins=50, ax=ax1)
ax1.set_title('overall')
recommendationsDf['funny'].hist(bins=50, range=[0,50], ax=ax2)
ax2.set_title('rentang 0-50 review')

"""### 2.2.12 Histogram data user"""

fig, ax = plt.subplots(1,2, figsize=(8,3))
usersDf['products'].hist(bins=50, ax=ax[0])
usersDf['products'].hist(bins=50, range=[0,1000], ax=ax[1])
fig.suptitle('products')
ax[0].set_title('Overall')
ax[1].set_title('Rentang 0-1000 product')
plt.tight_layout()

fig, ax = plt.subplots(1,2, figsize=(8,3))
usersDf['reviews'].hist(bins=50, ax=ax[0])
usersDf['reviews'].hist(bins=50, range=[0,50], ax=ax[1])
fig.suptitle('reviews')
ax[0].set_title('Overall')
ax[1].set_title('Rentang 0-50 review')
plt.tight_layout()
plt.show()

"""### 2.2.13 Berapa review yang merekomendasikan game yang direview"""

recommendationsDf['is_recommended'].value_counts().plot(kind='bar', rot=0)

"""# 3. Content-Based Filtering

## 3.1 Data preparation

### 3.1.1 Mengambil app_id, title, dan tags deari data game
"""

dfContent = gameJoined[['app_id', 'title', 'tags']]

"""### 3.1.2 Drop game yang tidak memiliki tag"""

dfContentWithTag = dfContent[dfContent["tags"].str.len() != 0]

"""### 3.1.3 Feature engineering dengan TF-IDF"""

tfidf = TfidfVectorizer(preprocessor=lambda x: x, tokenizer=lambda x: x)
dfMatrix = pd.DataFrame(
    tfidf.fit_transform(dfContentWithTag.pop('tags')).todense(),
    columns=tfidf.get_feature_names_out(),
    index=dfContentWithTag.app_id
)

"""## 3.2 Modelling

### 3.2.1 Inisiasi model KNN
"""

knnContent = NearestNeighbors(metric='cosine')

"""### 3.2.2 Fit model KNN dengan data matrix"""

knnContent.fit(dfMatrix)

"""## 3.3 Merekomendasikan Game

### 3.3.1 Inisiasi method rekomendasi
"""

def recommendGameContent(gameId, k=5):
    neighbors = knnContent.kneighbors(dfMatrix[dfMatrix.index == gameId], n_neighbors=k+1)
    gameIds = dfContentWithTag.iloc[neighbors[1][0][1:]]['app_id']

    return pd.DataFrame(
        gameIds
    ).merge(gameJoined, left_on='app_id', right_on='app_id')

"""### 3.3.2 Melihat game yang akan dibuat rekomendasinya"""

testid = 445980
testGame = gameJoined[gameJoined['app_id'] == testid]
testGame[['app_id','title', 'tags']]

"""### 3.3.3 Generate rekomendasi"""

recommendResult = recommendGameContent(testid)
recommendResult[['app_id','title', 'tags']]

"""## 3.4 Evaluasi"""

def evaluate(targetId, recommendedGames):
  targetTags = gameJoined[gamesDf['app_id'] == targetId]['tags'].tolist()[0]
  # print(targetTags)

  relevant = 0
  i=1
  for recommendTags in recommendedGames['tags']:
    # print(recommendTags)
    intersect = set(targetTags).intersection(recommendTags)
    union = set(targetTags).union(recommendTags)
    jaccard =  len(intersect) / len(union)
    print("Jaccard similarity untuk game ke-"+str(i)+" :",jaccard)
    if jaccard >= 0.5:
      relevant += 1

    i+=1

  print('precision@k = '+str(relevant/len(recommendedGames)))

evaluate(445980, recommendResult)

"""# 4. Collaborative Filtering

## 4.1 Data preparation

### 4.1.1 Mengambil app_id, user_id, dan is_recommended dari data review
"""

dfCollab = recommendationsDf[['app_id','user_id','is_recommended']]

"""### 4.1.2 Drop review yang tidak merekomendasikan game"""

dfCollab = dfCollab[dfCollab['is_recommended'] == True]

"""### 4.1.3 Membuat user-item matrix"""

userIds = dfCollab['user_id'].unique().tolist()
gameIds = dfCollab['app_id'].unique().tolist()

userToEncode = {x:i for i,x in enumerate(userIds)}
encodeToUser = {i:x for i,x in enumerate(userIds)}
gameToEncode = {x:i for i,x in enumerate(gameIds)}
encodeToGame = {i:x for i,x in enumerate(gameIds)}

userGameMatrix = coo_matrix(
    (
        [1 for x in range(dfCollab.shape[0])],
        (dfCollab['user_id'].map(userToEncode), dfCollab['app_id'].map(gameToEncode))
    )
)

userGameMatrixCsr = userGameMatrix.tocsr()

"""## 4.2 Modelling

### 4.2.1 Inisiasi model K-Means
"""

kmeansCollab = MiniBatchKMeans(random_state=0, n_clusters=1800)

"""### 4.2.2 Training model K-Means"""

kmeansCollab.fit(userGameMatrix)

"""## 4.3 Merekomendasikan Game

### 4.3.1 Inisiasi method rekomendasi
"""

def recommendGameCollab(userId, k=5):
    recommendedByUser = userGameMatrixCsr[userToEncode[userId]].nonzero()[1]

    clusterNumber = kmeansCollab.labels_[userToEncode[userId]]
    clusterIndeces = np.where(kmeansCollab.labels_ == clusterNumber)

    totalRecommended = np.sum(userGameMatrixCsr[clusterIndeces], axis=0).A1
    gameIndeces = np.argsort(totalRecommended)[::-1]

    gameRecommend = [game for game in gameIndeces if game not in recommendedByUser]

    gameIds = list(map(lambda x:encodeToGame[x], gameRecommend[:k]))
    return gameJoined[gameJoined['app_id'].isin(gameIds)]

"""### 4.3.2 Melihat game yang direview oleh user yang akan dibuat rekomendasinya"""

testid = 51580
games = dfCollab[dfCollab['user_id'] == 51580]['app_id']
gameJoined[gameJoined['app_id'].isin(games)]

"""### 4.3.3 Generate rekomendasi"""

recommendResult = recommendGameCollab(51580)
recommendResult

"""## 4.4 Evaluasi"""

silhouette_score(userGameMatrixCsr, kmeansCollab.labels_, sample_size=100000, random_state=0)